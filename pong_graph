`timescale 1ns / 1ps

module pong_graph(
    input clk,
    input reset,
    input key_a,      // Right paddle (Player 1) move up
    input key_s,      // Right paddle (Player 1) move down
    input key_k,      // Left paddle (Player 2) move up
    input key_l,      // Left paddle (Player 2) move down
    input gra_still,
    input video_on,
    input [9:0] x,    // Pixel x coordinate from VGA controller
    input [9:0] y,    // Pixel y coordinate from VGA controller
    input speed_up,
    input [1:0] state_reg_in,
    input over_in,
    output graph_on,
    output reg hit,
    output reg miss_left, miss_right,  // Replaced 'miss' with player-specific misses
    output reg [11:0] graph_rgb
);

    //-------------------------------------------------------------------------
    // Parameters and signal declarations (using original coordinate conventions)
    //-------------------------------------------------------------------------
    parameter X_MAX = 639;
    parameter Y_MAX = 479;
    
    // Wall boundaries (for top and bottom walls)
    parameter T_WALL_T = 64;
    parameter T_WALL_B = 71;
    parameter B_WALL_T = 472;
    parameter B_WALL_B = 479;
    
    // Paddle properties
    parameter PAD_HEIGHT = 72;
    parameter PAD_VELOCITY = 3;
    
    // Right paddle (Player 1) boundaries
    parameter X_PAD1_L = 600;
    parameter X_PAD1_R = 603;
    wire [9:0] y_pad1_t, y_pad1_b;
    reg [9:0] y_pad1_reg = 204, y_pad1_next;
    assign y_pad1_t = y_pad1_reg;
    assign y_pad1_b = y_pad1_t + PAD_HEIGHT - 1;
    wire pad1_on;
    assign pad1_on = (X_PAD1_L <= x) && (x <= X_PAD1_R) &&
                     (y_pad1_t <= y) && (y <= y_pad1_b);
                     
    // Left paddle (Player 2) boundaries
    parameter X_PAD2_L = 32;
    parameter X_PAD2_R = 35;
    wire [9:0] y_pad2_t, y_pad2_b;
    reg [9:0] y_pad2_reg = 204, y_pad2_next;
    assign y_pad2_t = y_pad2_reg;
    assign y_pad2_b = y_pad2_t + PAD_HEIGHT - 1;
    wire pad2_on;
    assign pad2_on = (X_PAD2_L <= x) && (x <= X_PAD2_R) &&
                     (y_pad2_t <= y) && (y <= y_pad2_b);
                     
    // Ball properties
    parameter BALL_SIZE = 16;
    wire [9:0] x_ball_l, x_ball_r, y_ball_t, y_ball_b;
    reg [9:0] ball_x_reg, ball_y_reg;
    wire [9:0] ball_x_next, ball_y_next;
    reg [9:0] x_delta_reg, x_delta_next;
    reg [9:0] y_delta_reg, y_delta_next;
    assign x_ball_l = ball_x_reg;
    assign x_ball_r = x_ball_l + BALL_SIZE - 1;
    assign y_ball_t = ball_y_reg;
    assign y_ball_b = y_ball_t + BALL_SIZE - 1;
    
    // Ball velocity parameters
    parameter BALL_VELOCITY_POS = 2;
    parameter BALL_VELOCITY_NEG = -2;
    
    // For bounce-angle physics
    reg [9:0] ball_center;
    reg [9:0] hit_point;
    
    // Solid ball
    wire ball_on;
    assign ball_on = (x_ball_l <= x) && (x <= x_ball_r) &&
                     (y_ball_t <= y) && (y <= y_ball_b);
                     
    // RGB color definitions
    wire [11:0] wall_rgb = 12'hFFF;
    wire [11:0] pad_rgb  = 12'hFFF;
    wire [11:0] ball_color = 12'hF0F;
    wire [11:0] bg_rgb   = 12'h888;
    
    // Refresh tick (once per frame)
    wire refr_tick;
    assign refr_tick = ((x == 0) && (y == 0));
    
    //-------------------------------------------------------------------------
    // Paddle Movement Logic
    //-------------------------------------------------------------------------
    always @* begin
        y_pad1_next = y_pad1_reg;
        y_pad2_next = y_pad2_reg;
        if (refr_tick) begin
            // Right paddle (Player 1) controlled by key_a (up) and key_s (down)
            if (key_s && (y_pad1_b < (B_WALL_T - 1 - PAD_VELOCITY)))
                y_pad1_next = y_pad1_reg + PAD_VELOCITY;
            else if (key_a && (y_pad1_t > (T_WALL_B + PAD_VELOCITY)))
                y_pad1_next = y_pad1_reg - PAD_VELOCITY;
            // Left paddle (Player 2) controlled by key_k (up) and key_l (down)
            if (key_l && (y_pad2_b < (B_WALL_T - 1 - PAD_VELOCITY)))
                y_pad2_next = y_pad2_reg + PAD_VELOCITY;
            else if (key_k && (y_pad2_t > (T_WALL_B + PAD_VELOCITY)))
                y_pad2_next = y_pad2_reg - PAD_VELOCITY;
        end
    end
    
    //-------------------------------------------------------------------------
    // Ball Movement Logic
    //-------------------------------------------------------------------------
    assign ball_x_next = (gra_still) ? (X_MAX / 2) :
                         (refr_tick) ? ball_x_reg + x_delta_reg :
                         ball_x_reg;
    assign ball_y_next = (gra_still) ? (Y_MAX / 2) :
                         (refr_tick) ? ball_y_reg + y_delta_reg :
                         ball_y_reg;
    
    //-------------------------------------------------------------------------
    // Collision and Bounce-Angle Physics
    //-------------------------------------------------------------------------
    always @* begin
        // Default: no hit or miss; retain previous velocities
        hit = 0;
        miss_left = 0;  // Player 2 misses (ball goes left), Player 1 scores
        miss_right = 0; // Player 1 misses (ball goes right), Player 2 scores
        x_delta_next = x_delta_reg;
        y_delta_next = y_delta_reg;
        
        // Compute the vertical center of the ball
        ball_center = y_ball_t + ((y_ball_b - y_ball_t) >> 1);
        
        if (gra_still) begin
            // When the game is resetting, assign initial ball velocity
            x_delta_next = BALL_VELOCITY_NEG;
            y_delta_next = BALL_VELOCITY_POS;
        end else begin
            // Bounce vertically if the ball reaches the top or bottom wall
            if (y_ball_t < T_WALL_B)
                y_delta_next = BALL_VELOCITY_POS;
            else if (y_ball_b > B_WALL_T)
                y_delta_next = BALL_VELOCITY_NEG;
            
            // Left Paddle Collision (Player 2)
            if ((X_PAD2_L <= x_ball_l) && (x_ball_l <= X_PAD2_R) &&
                (y_pad2_t <= y_ball_b) && (y_ball_t <= y_pad2_b)) begin
                hit_point = ball_center - y_pad2_t;
                if (hit_point < (PAD_HEIGHT / 5))
                    x_delta_next = BALL_VELOCITY_POS * 2; // e.g., 4
                else if (hit_point < 2 * (PAD_HEIGHT / 5))
                    x_delta_next = 3;
                else if (hit_point < 3 * (PAD_HEIGHT / 5))
                    x_delta_next = BALL_VELOCITY_POS;     // e.g., 2
                else if (hit_point < 4 * (PAD_HEIGHT / 5))
                    x_delta_next = 3;
                else
                    x_delta_next = BALL_VELOCITY_POS * 2;
                hit = 1;
            end
            // Right Paddle Collision (Player 1)
            else if ((X_PAD1_L <= x_ball_r) && (x_ball_r <= X_PAD1_R) &&
                     (y_pad1_t <= y_ball_b) && (y_ball_t <= y_pad1_b)) begin
                hit_point = ball_center - y_pad1_t;
                if (hit_point < (PAD_HEIGHT / 5))
                    x_delta_next = - (BALL_VELOCITY_POS * 2);
                else if (hit_point < 2 * (PAD_HEIGHT / 5))
                    x_delta_next = -3;
                else if (hit_point < 3 * (PAD_HEIGHT / 5))
                    x_delta_next = -2;
                else if (hit_point < 4 * (PAD_HEIGHT / 5))
                    x_delta_next = -3;
                else
                    x_delta_next = - (BALL_VELOCITY_POS * 2);
                hit = 1;
            end
            // Out-of-Bounds Check
            else begin
                if (x_ball_r > X_MAX)      // Ball goes past right paddle
                    miss_right = 1;        // Player 1 misses, Player 2 scores
                else if (x_ball_l < 0)     // Ball goes past left paddle
                    miss_left = 1;         // Player 2 misses, Player 1 scores
            end
        end
    end
    
    //-------------------------------------------------------------------------
    // Register Updates (synchronized with refr_tick)
    //-------------------------------------------------------------------------
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            y_pad1_reg <= 204;
            y_pad2_reg <= 204;
            ball_x_reg <= 0;
            ball_y_reg <= 0;
            x_delta_reg <= BALL_VELOCITY_POS;  // e.g., initial speed 2
            y_delta_reg <= BALL_VELOCITY_POS;
        end else if (refr_tick) begin
            y_pad1_reg <= y_pad1_next;
            y_pad2_reg <= y_pad2_next;
            ball_x_reg <= ball_x_next;
            ball_y_reg <= ball_y_next;
            x_delta_reg <= x_delta_next;
            y_delta_reg <= y_delta_next;
        end
    end
    
    //-------------------------------------------------------------------------
    // RGB Multiplexing (choose which object's color to display)
    //-------------------------------------------------------------------------
    always @* begin
        if (~video_on)
            graph_rgb = 12'h000;
        else if ((x < 640) && ((y >= T_WALL_T && y <= T_WALL_B) || (y >= B_WALL_T && y <= B_WALL_B)))
            graph_rgb = wall_rgb;
        else if (pad1_on || pad2_on)
            graph_rgb = pad_rgb;
        else if (ball_on)
            graph_rgb = ball_color;
        else
            graph_rgb = bg_rgb;
    end
    
    // Combine object on signals to generate graph_on output
    assign graph_on = (pad1_on | pad2_on | ball_on);
    
endmodule
